from nba_api.stats.endpoints import alltimeleadersgrids
from nba_api.stats.endpoints import playergamelog

def get_carrer_data():
    #Currently returning data frame but change based off what is necissary.
    alltime_data = alltimeleadersgrids.AllTimeLeadersGrids()
    alltime_data = alltime_data.get_data_frames()[0]
    return alltime_data

class CurrentSeasonData:
    points = 0
    plus_minus = 0
    tov = 0
    assists = 0
    min_played = 0
    true_shooting = 0

    def __init__(self) -> None:
        pass

    def get_player_stats(self, player_id, season):
        player_log = playergamelog.PlayerGameLog(player_id=player_id, season=season)
        player_log_data = player_log.get_data_frames()[0]
        self.points = player_log_data['PTS']
        self.plus_minus = player_log_data['PLUS_MINUS']
        self.tov = player_log_data['TOV']
        self.assists = player_log_data['AST']
        self.fg_attempted = player_log_data['FGA']
        self.ft_attempted = player_log_data['FTA']

        return player_log_data
    
    def calc_true_shooting(self):
        self.true_shooting = self.points / (2*(self.fg_attempted + 0.44*self.ft_attempted))

    def calc_player_score(self):
        elo = self.true_shooting #+... (tbd)
        #Add future algo to calc player score

